tree = {
    'O': {'A': 2, 'C': 4, 'B': 5},
    'A': {'O': 2, 'B': 2, 'D': 7},
    'B': {'O': 5, 'A': 2, 'C': 1, 'D': 4, 'E': 3},
    'C': {'O': 4, 'B': 1, 'E': 4},
    'D': {'B': 4, 'E': 1, 'T': 5},
    'E': {'B': 3, 'D': 1, 'T': 7},
    'T': {'D': 5, 'E': 7}
}
distance = 0  # 연결된 거리의 총합
ans = []  # 반복을 진행하면서 연결되는 경로가 추가되는 리스트
starting_point = ["O"]  # 출발지는 어디든 상관없으므로 "O" 에서 출발
Y = []  # 각 반복에서 나갈수있는 경로의 후보군들
while True:
    for i in starting_point:  # 사이클을 이루지 않게하면서 현재 출발지점에서 갈 수 있는 경로 후보군들의 선택
        for j in tree[i]:
            if not j in starting_point:
                Y.append([tree[i][j], i, j])
    print("후보군:", Y)
    for i in range(len(Y) - 1):  # 후보군들을 거리가 짧은순으로 버블정렬
        for j in range(i + 1, len(Y)):
            if Y[i][0] > Y[j][0]:
                t = Y[i]
                Y[i] = Y[j]
                Y[j] = t
    ans.append(["{} - {} : {}".format(Y[0][1], Y[0][2], Y[0][0])])  # 후보군중 가장짧은 경로를 X-Y:number 로 표시하여 추가
    distance += Y[0][0]  # 총연결거리의 갱신
    starting_point.append(Y[0][2])  # 출발가능지점의 추가
    Y = []
    print("갱신값:", ans)
    print("완료점:", starting_point)
    print("-" * 50)
    if len(starting_point) == len(tree):
        print('''최단거리는"''', distance, '''"입니다.''')
        break
